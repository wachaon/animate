{
  "{7B8B2B41-A680-4E74-B5B3-4DC56E8F6C58}": {
    "source": "{\n  \"name\": \"animate\",\n  \"version\": \"0.0.1\",\n  \"description\": \"animate\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/animate.git\"\n  },\n  \"keywords\": [\n    \"wes\",\n    \"animate\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/animate/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/animate#readme\"\n}\n",
    "mapping": {},
    "path": "{animate}/package.json"
  },
  "{54FFBAEE-6085-4DF1-AADD-20D199C4E413}": {
    "source": "const { LF, rLINE_SEP } = require('text')\r\nconst { isArray, isFunction, isNumber } = require('typecheck')\r\n\r\nclass Animate {\r\n    constructor(complete) {\r\n        this.queue = []\r\n        this.pause = true\r\n        this.view = []\r\n        this.lastRow = 0\r\n        this.complete = complete\r\n    }\r\n\r\n    /**\r\n     * Register Queues\r\n     * @param {Fucntion} callback\r\n     * @param {Number|null} interval\r\n     * @param {Number|Function|null} conditional\r\n     * @return {QueueElement} Queue Element\r\n     */\r\n    register(callback, interval, conditional) {\r\n        const element = {\r\n            count: increment(),\r\n            callback,\r\n            interval: interval || 1,\r\n            conditional: isFunction(conditional)\r\n                ? conditional\r\n                : isNumber(conditional)\r\n                    ? decrement(conditional)\r\n                    : decrement()\r\n        }\r\n        element.timeout = Date.now() + element.interval\r\n        this.queue.push(element)\r\n        return element\r\n    }\r\n\r\n    /**\r\n     * Cancel Queue\r\n     * @param {QueueElement} queue\r\n     * @return {null} void 0\r\n     */\r\n    cancel(queue) {\r\n        this.queue = this.queue.filter((t) => t !== queue)\r\n    }\r\n\r\n    /**\r\n     * Run Queues\r\n     * @return {Null} void 0\r\n     */\r\n    run() {\r\n        this.pause = false\r\n        while (this.queue.length && !this.pause) {\r\n            const now = Date.now()\r\n            this.queue.forEach((element) => {\r\n                if (now > element.timeout) {\r\n                    const count = element.count()\r\n                    if (element.conditional(count, element)) {\r\n                        element.callback(count)\r\n                        element.timeout = now + element.interval\r\n                    }\r\n                }\r\n            })\r\n            const { lastRow } = this\r\n            const view = isArray(this.view) ? this.view : String(this.view).split(rLINE_SEP)\r\n            const diff = lastRow - (this.lastRow = view.length)\r\n\r\n            if (lastRow === 0) {\r\n                if (view.length === 0) continue\r\n                else console.log(view.join(LF))\r\n            } else if (diff === 0) console.replace(view.join(LF))\r\n            else if (diff > 0) console.replace(view.concat(new Array(diff).fill('')).join(LF))\r\n            else {\r\n                console.replace(view.slice(lastRow))\r\n                console.log(view.slice(diff))\r\n            }\r\n        }\r\n        if (this.complete != null && isFunction(this.complete)) this.complete()\r\n    }\r\n\r\n    /**\r\n     * Stop Queues\r\n     * @return {Null} void 0\r\n     */\r\n    stop() {\r\n        this.pause = true\r\n    }\r\n\r\n    /**\r\n     * Generation of progress indicator functions\r\n     * @param {Array} animation\r\n     * @returns {Function} Function to return an array element given a number\r\n     */\r\n    static genProgressIndicator(animation = ['|', '/', '-', '\\\\']) {\r\n        return function (i = 0) {\r\n            return animation[i % animation.length]\r\n        }\r\n    }\r\n}\r\n\r\n// util\r\nfunction decrement(count = 1) {\r\n    return function () {\r\n        if (count < 0) return 0\r\n        return count--\r\n    }\r\n}\r\n\r\nfunction increment(count = 0) {\r\n    return function () {\r\n        if (count < 0) return (count = 0)\r\n        return count++\r\n    }\r\n}\r\n\r\nmodule.exports = Animate\r\n",
    "mapping": {},
    "path": "{animate}/index.js"
  }
}